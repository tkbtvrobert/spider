class ProblemSVM {
	constructor () {
		this.l = 0;
		this.x = [];
		this.y = [];
		this.template = {coord: null, value: null};
	}
}

module.exports = ProblemSVM;
/*
const constFunctions = require('./svm-statics.js');

class ProblemSVM {
	constructor (inParams) {
		this.l;
		if (inParams !== undefined) {
			if (inParams.l !== undefined)
				this.l = inParams.l;
		}
		this.x = [];
		this.y = [];
		this.svmNode = [];
	}
    
	crossValidation (inParams) {
		let foldStart = [];
		let svmData = constFunctions.getSvmGroupClasses(this);

		let start = svmData.start;
		let count = svmData.count;
		let perm = svmData.perm;
		let nrClass = svmData.nr_class;

		let index = [];
		for (let i = 0; i < this.l; i++)
			index[i] = perm;

		for (let c = 0; c < nrClass; c++) {
			for (let i = 0; i < count[c]; i++) {
				let j = i + Math.random() % (count[c] - i);
				let temp = index[start[c] + j];
				index[start[c] + j] = index[start[c] + i];
				index[start[c] + i] = temp;
			}
		}
		foldStart[0] = 0;
		for (let c = 0; c < nrClass; c++) {
			for (let i = 0; i < inParams.nr_fold; i++) {
				let begin = start[c] + i * count[c] / inParams.nr_fold;
				let end = start[c] + (i + 1) * count[c] / inParams.nr_fold;
				for (let j = begin; j < end; j++) {
					perm[foldStart[i]] = index[j];
					foldStart[i]++;
				}
			}
		}
	}    
};
*/
