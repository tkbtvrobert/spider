const Bayes = require('./algorithms/bayes.js').Bayes;
const Shingles = require('./algorithms/shingles.js').Shingles;
const SVM = require('./algorithms/svm.js').SVM;

const fingerprintType = {
	Shingles: 0,
	Bayes: 1,
	Svm: 2
};

const fingerprintActionType = {
	generate: 0,
	check: 1
};

class FingerprintManager {
	constructor () {
		this.fingerprints = [];
	}

	_removeFingeprint (inParams, inActionType) {
		this.fingerprints = this.fingerprints.filter(fingeprint => {
			if (fingeprint.id === inParams.id && inActionType === fingeprint.actionType) {
				// TODO: fingeprint.onStop();
				return false;
			}
			return true;
		});
	}

	_createFingeprint (inParams, inActionType) {
		let fingerprint;
		const algorithm = parseInt(inParams.algorithm);
		switch (algorithm) {
			case fingerprintType.Shingles:
				fingerprint = new Shingles(inParams);
				break;
			case fingerprintType.Bayes:
				fingerprint = new Bayes(inParams);
				break;
			case fingerprintType.Svm:
				fingerprint = new SVM(inParams);
				break;
		}

		if (fingerprint) {
			fingerprint.actionType = inActionType;
			this.fingerprints.push(fingerprint);
		}

		return fingerprint;
	}

	_getFingerprint (inParams) {
		const fingerprint = this.fingerprints.find(currentFingerprint => (currentFingerprint.id === inParams.id));
		return fingerprint;
	}

	generate (inParams, onDone) {
		let fingerprint;
		fingerprint = this._getFingerprint(inParams);
		if (fingerprint) {
			switch (fingerprint.actionType) {
				case fingerprintActionType.generate:
					return onDone(/* zres:z_cmn_generation_in_process */'генерация в процессе'/* /zres */);
				case fingerprintActionType.check:
					this._removeFingeprint(inParams, fingerprintActionType.check);
					break;
			}
		}

		fingerprint = this._createFingeprint(inParams, fingerprintActionType.generate);
		if (!fingerprint)
			return onDone('Unavalible algorithm of fingerprint');

		fingerprint.prepare((err) => {
			if (err)
				return onDone(err);

			return fingerprint.generate(inParams, (err, inData) => {
				this._removeFingeprint(inParams, fingerprintActionType.generate);
				return onDone(err, inData);
			});
		});
	}

	check (inParams, onDone) { // формат inParams - coincidence_rate - порог вхождения (от 1 до 100), path - путь к файлу, id - id отпечатка.
		this._removeFingeprint(inParams);

		const fingerprint = this._createFingeprint(inParams, fingerprintActionType.check);
		if (!fingerprint)
			return onDone('Unavalible algorithm of fingerprint');

		return fingerprint.check(inParams, (err, inData) => {
			this._removeFingeprint(inParams, fingerprintActionType.generate);
			return onDone(err, inData);
		});
	}
}

module.exports.FingerprintManager = FingerprintManager;
module.exports.fingerprintActionType = fingerprintActionType;
