const threads = require('threads');
const common = require('../../common');

class Fingerprint {
	constructor (inParams) {
		this.id = inParams.id;

		this.params = inParams;
		this.params.__dirname = __dirname;
		this.params.env = process.env;
		this.params.argv = process.argv;

		this.spawn = threads.spawn;
		this.currentStatus = {status: 0,
			info: /* zres:z_cs_unknown_status */'Неизвестный статус'/* /zres */};
	}

	prepare (onDone) {
		let tempName = common.tempId();
		let Directory = common.tempFolder;
		let tempDirectory = new Directory({name: tempName, deleteFound: false});
		tempDirectory.prepare({}, (err, tempCatalog) => {
			if (err)
				return onDone(err);
			this.params.tempCatalog = tempCatalog;

			let	logDirectory = new Directory({name: tempName + '_log', deleteFound: false});
			logDirectory.prepare({}, (err, logCatalog) => {
				if (err)
					return onDone(err);
				this.params.log = logCatalog + '/log.txt';
				return onDone();
			});
		});
	}

	getStatus () {
		return this.currentStatus;
	}

	generate (onDone) {
		return onDone('Genrate is not avalible');
	}

	check (inParams, onDone) {
		return onDone('Check is not avalible');
	}
}
module.exports = Fingerprint;
