const Fingerprint = require('./base-fingerprint.js');

class Shingles extends Fingerprint {
	generate (inParams, onDone) {
		const generateThread = this.spawn((inParams, onDone, progress) => {
			progress({progress_report_type: 0,
				report: {
					status: 1,
					info: /* zres:z_cs_start_generation_fingerprint */'Генерация отпечатка. Старт.'/* /zres */}
			});
			if (inParams.subjects.folders === undefined)
				throw new Error('Bayes fingerprint generate thread: have not folders!');
			if (inParams.subjects.folders.length === 0)
				throw new Error('Bayes fingerprint generate thread: Folders paths is empty!');

			const path = require('path');
			const EventEmitter = require('events').EventEmitter;
			const initThreadsProcess = require(inParams.__dirname + '/../init-thread-env-args.js');
			initThreadsProcess(inParams);

			const ShinglesTrainerClass = require(path.join(inParams.__dirname, '/../trainers/shingles-trainer.js'));
			let ShinglesTrainer = new ShinglesTrainerClass();
			let GenerationEventEmitter = new EventEmitter();

			let trainParams = {
				minLength: 4,
				folders: inParams.subjects.folders,
				log: inParams.log,
				pathToCategoryCatalog: inParams.tempCatalog,
				__dirname: inParams.__dirname,
				eventEmitter: GenerationEventEmitter,
				based_on: inParams.options.shingles_based_on
			};

			ShinglesTrainer.train(trainParams, (err, status) => {
				if (err)
					throw new Error('Shingle fingerprint generate thread: Error on training! ' + err);
				return onDone({generateErrors: status.trainError});
			});

			GenerationEventEmitter.on('generation_report', (report) => {
				progress({progress_report_type: 0, report: report});
			});

			GenerationEventEmitter.on('log_report', (outStatus) => {
				progress({progress_report_type: 1, report: outStatus});
			});
		}, [], { execArgv: [] });

		generateThread
			.send(this.params)
			.on('progress', (information) => {
				switch (information.progress_report_type) {
					case 0:
						this.currentStatus = information.report;
						inParams.statusEmitter.emit('status', this.currentStatus);
						break;
					case 1:
						inParams.statusEmitter.emit('log', information.report);
						break;
				}
			})
			.on('message', (out) => {
				if (out.generateErrors === false) {
					this.currentStatus = {status: 3,
						info: /* zres:z_cs_generation_successful */'Генерация успешно выполнена'/* /zres */};
				} else {
					this.currentStatus = {status: 4,
						info: /* zres:z_cs_generation_error */'Генерация проведена с ошибкой'/* /zres */};
				}
				inParams.statusEmitter.emit('status', this.currentStatus);
				generateThread.kill();
			})
			.on('error', (err) => {
				this.currentStatus = {status: 5,
					info: /* zres:z_cs_generation_failed */'Генерация не выполнена'/* /zres */};
				inParams.statusEmitter.emit('status', this.currentStatus);
				return onDone(err);
			})
			.on('exit', () => onDone(null, {tempFolder: this.params.tempCatalog, currentStatus: this.currentStatus}));
	}

	check (inParams, onDone) { // формат inParams - coincidence_rate - порог вхождения (от 1 до 100), path - путь к файлу, categoryPath - папка с отпечатком, statusEmitter - евент емиттер 
		let currentParams = Object.assign({}, this.params);
		currentParams.checkParams = inParams;
		let currentAnswer;

		const checkThread = this.spawn((inParams, onDone, progress) => {
			const path = require('path');
			const initThreadsProcess = require(inParams.__dirname + '/../init-thread-env-args.js');
			initThreadsProcess(inParams);

			const ShinglesTrainerClass = require(path.join(inParams.__dirname, '/../trainers/shingles-trainer.js'));
			let ShinglesTrainer = new ShinglesTrainerClass();

			progress({status: 2,
				info: /* zres:z_cs_check_file_by_fingerprint */'Проверка файла ' + inParams.checkParams.path + ' по отпечатку'/* /zres */});

			ShinglesTrainer.load({categoryPath: inParams.checkParams.categoryPath}, (err) => {
				if (err)
					throw new Error('Shingle fingerprint check thread: Error on load model! ' + err);
				let currentExtractParams = Object.assign({}, ShinglesTrainer.baseExtractParams);
				currentExtractParams.in_path = inParams.checkParams.path;
				currentExtractParams.out_path = inParams.checkParams.path + '.txt';

				ShinglesTrainer.prepareTextContent(currentExtractParams, (err, outData) => {
					if (err)
						throw new Error('Shingle fingerprint check thread: Error on load content for check! ' + err);
					let content = outData.data.toString();
					ShinglesTrainer.pepareContentFileInfo({filepath: currentExtractParams.in_path}, (err, fileInfo) => {
						if (err)
							throw new Error('Shingle fingerprint check thread: Error on preparing content file info! ' + err);
						let checkParams = Object.assign({}, fileInfo);
						checkParams.content = content;
						checkParams.output_type = 1;
						checkParams.threshold = inParams.coincidence_rate;
						ShinglesTrainer.check(checkParams, (err, result) => {
							if (err)
								throw new Error('Shingle fingerprint check thread: Error on check! ' + err);
							if (result.preAnswer !== undefined)
								return onDone(result.preAnswer);
							let answer = {
								status: 3,
								Check_Result: {
									IsDuplicate: false}
							};
							if (result.probability === 0)
								return onDone(answer);
							return onDone(ShinglesTrainer.formTrueCheckAnswer({Algorithm: 'Shingles', result: result, answer: answer}));
						});
					});
				});
			});
		}, [], { execArgv: [] });

		checkThread
			.send(currentParams)
			.on('progress', (currentStatus) => {
				this.currentStatus = currentStatus;
				inParams.statusEmitter.emit('status', this.currentStatus);
			})
			.on('message', (answer) => {
				currentAnswer = answer;
				inParams.statusEmitter.emit('status', answer);
				checkThread.kill();
			})
			.on('error', (err) => {
				this.currentStatus = {status: 3,
					info: /* zres:z_cs_error_check */'Проверка закончилась с ошибкой'/* /zres */};
				inParams.statusEmitter.emit('status', this.currentStatus);
				return onDone(err);
			})
			.on('exit', () => {
				this.currentStatus = {status: 3,
					info: /* zres:z_cs_generation_successful */'Генерация успешно выполнена'/* /zres */};
				return onDone(null, currentAnswer);
			});
	}
}
module.exports.Shingles = Shingles;
