const EventEmitter = require('events');
const path = require('path');
const fs = require('fs');

const myParams = require('./gen-params-svm.json');
const FingerprintsManager = require('../index').FingerprintManager;
const common = require('../../common/index');

const Manager = new FingerprintsManager();

class WorkEvents extends EventEmitter {
	constructor (tasksManager) {
		super();

		this.on('status', this._onStatus);
	}

	static get logName () {
		return 'log.txt';
	}

	activateLogEvent (onDone) {
		console.log(`activateLogEvent`);
		const Directory = common.tempFolder;
		const tempName = common.tempId() + '_log';
		const logDirectory = new Directory({name: tempName, deleteFound: false});
		return logDirectory.prepare({}, (err, logCatalog) => {
			if (err)
				return onDone(err);

			this._logPath = path.join(logCatalog, WorkEvents.logName);
			console.log(`Create log: ${JSON.stringify(this._logPath)}`);
			this.on('log', this._onLog);

			return onDone(null, logCatalog);
		});
	}

	_onStatus (inEvent, inParams) {
		console.log(`Event status: ${JSON.stringify(inEvent)}`);
	}

	_onLog (inParams) {
		fs.appendFileSync(this._logPath, inParams.message);
	}
};

class WorkGenerate {
	execute (inParams, onDone) {
		console.log('Generate Start.');

		const statusEmitter = new WorkEvents();
		inParams['statusEmitter'] = statusEmitter;
		statusEmitter.activateLogEvent((err) => {
			if (err) {
				console.log('Generate Done');
				return onDone(err);
			}

			return Manager.generate(inParams, (err, outPaths) => {
				console.log('Generate Done.');
				if (err)
					console.log(err);

				console.log('outPaths:');
				console.log(JSON.stringify(outPaths));

				return onDone(err, outPaths);
			});
		});
	}
}

class WorkCheck {
	execute (inParams, onDone) {
		console.log('Check Start.');

		const statusEmitter = new WorkEvents();
		inParams['statusEmitter'] = statusEmitter;
		return Manager.check(inParams, (err, answer) => {
			console.log('Check Result');
			if (err)
				console.log(err);
			console.log(JSON.stringify(answer));
			console.log('Check Done.');

			return onDone(err, answer);
		});
	}
}
/*
describe('fingerprints work', () => { // eslint-disable-line
	it(`Generate and check`, () => { // eslint-disable-line
		let worker = new WorkGenerate();
		let promise = new Promise((resolve, reject) => {
			worker.execute(myParams, (err, outPaths) => {
				if (err)
					return reject(err);
				const checkParams = myParams;
				checkParams.path = 'D:\\_My_shingl\\gen2\\test1.txt';
				checkParams.coincidence_rate = 20;
				checkParams.categoryPath = outPaths.tempFolder;
				new WorkCheck().execute(checkParams, (err) => {
					if (err)
						return reject(err);
					resolve(true);
				});
			});
		});
		promise.then((result) => {
			return result;
		}).catch((err) => {
			console.log(err);
		});
		return promise;
	}).timeout(5000);
});
*/
// вызов тестовых функций

function onGenerate (err, outPaths) {
	if (err)
		return;

	const checkParams = myParams;
	checkParams.path = 'D:\\_My_shingl\\gen2\\test1.txt';
	checkParams.coincidence_rate = 20;
	checkParams.categoryPath = outPaths.tempFolder;

	new WorkCheck().execute(checkParams, () => {});
}

new WorkGenerate().execute(myParams, onGenerate);
